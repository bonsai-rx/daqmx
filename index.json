{
  "api/Bonsai.DAQmx.AnalogChannelConfiguration.html": {
    "href": "api/Bonsai.DAQmx.AnalogChannelConfiguration.html",
    "title": "Class AnalogChannelConfiguration",
    "keywords": "Class AnalogChannelConfiguration Provides an abstract base class for configuration of virtual analog channels in DAQmx operators. Inheritance Object AnalogChannelConfiguration AnalogInputChannelConfiguration AnalogOutputChannelConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax [TypeConverter(typeof(AnalogChannelConfigurationConverter))] public abstract class AnalogChannelConfiguration Properties | Improve this Doc View Source ChannelName Gets or sets the name to assign to the local created virtual channel. If not specified, the physical channel name will be used. Declaration public string ChannelName { get; set; } Property Value Type Description String | Improve this Doc View Source MaximumValue Gets or sets a value specifying the maximum value to measure or generate, in the specified voltage units. Declaration public double MaximumValue { get; set; } Property Value Type Description Double | Improve this Doc View Source MinimumValue Gets or sets a value specifying the minimum value to measure or generate, in the specified voltage units. Declaration public double MinimumValue { get; set; } Property Value Type Description Double"
  },
  "api/Bonsai.DAQmx.AnalogInput.html": {
    "href": "api/Bonsai.DAQmx.AnalogInput.html",
    "title": "Class AnalogInput",
    "keywords": "Class AnalogInput Represents an operator that generates a sequence of voltage measurements from one or more DAQmx analog input channels. AnalogInput configures and starts a data acquisition task for sampling voltage measurements from one or more physical analog input channels. Samples from each channel will be collected in a sample buffer, where each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. If no input source is specified, data will be collected asynchronously every time a new buffer is filled. Alternatively, if an input observable sequence is provided, a new data buffer will be collected every time a new notification is emitted by the input source. Inheritance Object Source < Mat > AnalogInput Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax public class AnalogInput : Source<Mat> Properties | Improve this Doc View Source ActiveEdge Gets or sets a value specifying on which edge of a clock pulse sampling takes place. Declaration public SampleClockActiveEdge ActiveEdge { get; set; } Property Value Type Description NationalInstruments.DAQmx.SampleClockActiveEdge | Improve this Doc View Source BufferSize Gets or sets the number of samples to acquire, for finite samples, or the size of the buffer for continuous sampling. Declaration public int BufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Channels Gets the collection of analog input channels from which to acquire voltage samples. Declaration public Collection<AnalogInputChannelConfiguration> Channels { get; } Property Value Type Description Collection < AnalogInputChannelConfiguration > | Improve this Doc View Source SampleMode Gets or sets a value specifying whether the acquisition task will acquire a finite number of samples or if it continuously acquires samples. Declaration public SampleQuantityMode SampleMode { get; set; } Property Value Type Description NationalInstruments.DAQmx.SampleQuantityMode | Improve this Doc View Source SampleRate Gets or sets the sampling rate for acquiring voltage measurements, in samples per second. Declaration public double SampleRate { get; set; } Property Value Type Description Double | Improve this Doc View Source SamplesPerChannel Gets or sets the number of samples per channel in each output buffer. If not specified, the number of samples will be set to the size of the buffer. Declaration public int? SamplesPerChannel { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source SignalSource Gets or sets the optional source terminal of the clock. If not specified, the internal clock of the device will be used. Declaration public string SignalSource { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence of voltage measurements from one or more DAQmx analog input channels. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of 2D Mat objects storing the voltage samples. Each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of voltage measurements from one or more DAQmx analog input channels, where each new buffer is emitted only when an observable sequence emits a notification. Declaration public IObservable<Mat> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting sample buffers. Returns Type Description IObservable < Mat > A sequence of 2D Mat objects storing the voltage samples. Each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.DAQmx.AnalogInputChannelConfiguration.html": {
    "href": "api/Bonsai.DAQmx.AnalogInputChannelConfiguration.html",
    "title": "Class AnalogInputChannelConfiguration",
    "keywords": "Class AnalogInputChannelConfiguration Represents the configuration of a virtual analog input channel in DAQmx operators. Inheritance Object AnalogChannelConfiguration AnalogInputChannelConfiguration Inherited Members AnalogChannelConfiguration.ChannelName AnalogChannelConfiguration.MinimumValue AnalogChannelConfiguration.MaximumValue Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax public class AnalogInputChannelConfiguration : AnalogChannelConfiguration Properties | Improve this Doc View Source PhysicalChannel Gets or sets the name of the physical channel used to create the local virtual channel. Declaration [TypeConverter(typeof(AnalogInputPhysicalChannelConverter))] public string PhysicalChannel { get; set; } Property Value Type Description String | Improve this Doc View Source TerminalConfiguration Gets or sets a value specifying the terminal configuration for the channel. Declaration public AITerminalConfiguration TerminalConfiguration { get; set; } Property Value Type Description NationalInstruments.DAQmx.AITerminalConfiguration | Improve this Doc View Source VoltageUnits Gets or sets a value specifying the units used to return voltage measurements from the channel. Declaration public AIVoltageUnits VoltageUnits { get; set; } Property Value Type Description NationalInstruments.DAQmx.AIVoltageUnits Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.DAQmx.AnalogOutput.html": {
    "href": "api/Bonsai.DAQmx.AnalogOutput.html",
    "title": "Class AnalogOutput",
    "keywords": "Class AnalogOutput Represents an operator that generates voltage signals in one or more DAQmx analog output channels from a sequence of sample buffers. AnalogOutput configures and starts a task for generating voltage signals in one or more physical analog output channels. Voltage samples for each channel are read from sample buffers in the source sequence, where each row corresponds to one of the channels in the signal generation task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Signals can be generated continuously, where a ring buffer is constanty updated with new data arriving from the source sequence. Alternatively, signals can also be generated with a finite number of samples, in which case the input buffers will provide samples until the specified buffer size is reached. In this case, the operator will wait for the task to finish generating the specified number of samples. Inheritance Object Combinator < Mat , Mat > Sink < Mat > AnalogOutput Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax public class AnalogOutput : Sink<Mat> Properties | Improve this Doc View Source ActiveEdge Gets or sets a value specifying on which edge of a clock pulse sampling takes place. Declaration public SampleClockActiveEdge ActiveEdge { get; set; } Property Value Type Description NationalInstruments.DAQmx.SampleClockActiveEdge | Improve this Doc View Source BufferSize Gets or sets the number of samples to generate, for finite samples, or the size of the buffer for continuous signal generation. Declaration public int BufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Channels Gets the collection of analog output channels used to generate voltage signals. Declaration public Collection<AnalogOutputChannelConfiguration> Channels { get; } Property Value Type Description Collection < AnalogOutputChannelConfiguration > | Improve this Doc View Source SampleMode Gets or sets a value specifying whether the signal generation task will generate a finite number of samples or if it continuously generates samples. Declaration public SampleQuantityMode SampleMode { get; set; } Property Value Type Description NationalInstruments.DAQmx.SampleQuantityMode | Improve this Doc View Source SampleRate Gets or sets the sampling rate for generating voltage signals, in samples per second. Declaration public double SampleRate { get; set; } Property Value Type Description Double | Improve this Doc View Source SignalSource Gets or sets the optional source terminal of the clock. If not specified, the internal clock of the device will be used. Declaration public string SignalSource { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Mat>) Generates voltage signals in one or more DAQmx analog output channels from an observable sequence of sample buffers. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D Mat objects storing the voltage samples. Each row corresponds to one of the channels in the signal generation task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of generating voltage signals in one or more DAQmx analog output channels. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process(IObservable<Double>) Generates a voltage signal in one or more DAQmx analog output channels from an observable sequence of samples. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of floating-point numbers representing the samples used to generate voltage signals. Returns Type Description IObservable < Double > An observable sequence that is identical to the source sequence but where there is an additional side effect of generating voltage signals in one or more DAQmx analog output channels."
  },
  "api/Bonsai.DAQmx.AnalogOutputChannelConfiguration.html": {
    "href": "api/Bonsai.DAQmx.AnalogOutputChannelConfiguration.html",
    "title": "Class AnalogOutputChannelConfiguration",
    "keywords": "Class AnalogOutputChannelConfiguration Represents the configuration of a virtual analog output channel in DAQmx operators. Inheritance Object AnalogChannelConfiguration AnalogOutputChannelConfiguration Inherited Members AnalogChannelConfiguration.ChannelName AnalogChannelConfiguration.MinimumValue AnalogChannelConfiguration.MaximumValue Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax public class AnalogOutputChannelConfiguration : AnalogChannelConfiguration Properties | Improve this Doc View Source PhysicalChannel Gets or sets the name of the physical channel used to create the local virtual channel. Declaration [TypeConverter(typeof(AnalogOutputPhysicalChannelConverter))] public string PhysicalChannel { get; set; } Property Value Type Description String | Improve this Doc View Source VoltageUnits Gets or sets a value specifying in what units to generate voltage on the channel. Declaration public AOVoltageUnits VoltageUnits { get; set; } Property Value Type Description NationalInstruments.DAQmx.AOVoltageUnits Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.DAQmx.DigitalChannelConfiguration.html": {
    "href": "api/Bonsai.DAQmx.DigitalChannelConfiguration.html",
    "title": "Class DigitalChannelConfiguration",
    "keywords": "Class DigitalChannelConfiguration Provides an abstract base class for configuration of virtual digital channels in DAQmx operators. Inheritance Object DigitalChannelConfiguration DigitalInputChannelConfiguration DigitalOutputChannelConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax [TypeConverter(typeof(DigitalChannelConfigurationConverter))] public abstract class DigitalChannelConfiguration Properties | Improve this Doc View Source ChannelName Gets or sets the name to assign to the local created virtual channel. If not specified, the physical channel name will be used. Declaration public string ChannelName { get; set; } Property Value Type Description String | Improve this Doc View Source Grouping Gets or sets a value specifying how to group digital lines into one or more virtual channels. Declaration public ChannelLineGrouping Grouping { get; set; } Property Value Type Description NationalInstruments.DAQmx.ChannelLineGrouping"
  },
  "api/Bonsai.DAQmx.DigitalInput.html": {
    "href": "api/Bonsai.DAQmx.DigitalInput.html",
    "title": "Class DigitalInput",
    "keywords": "Class DigitalInput Represents an operator that reads a sequence of logical values from one or more DAQmx digital input lines. DigitalInput configures and starts a data acquisition task for sampling logical values from one or more digital input lines. Logical values will be collected in a sample buffer, where each sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels in the sample buffer follows the order in which you specify the channels in the Channels property. Digital lines can be grouped as a port when creating the local virtual channel, either by specifying a range of lines (e.g. Dev1/port0/line0:3 ) or by specifying an entire port at once (e.g. Dev1/port0 ). If no input source is specified, samples will be collected asynchronously every time a new buffer is filled. Alternatively, if an input observable sequence is provided, a new sample buffer will be collected every time a new notification is emitted by the input source. Inheritance Object Source < Mat > DigitalInput Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax public class DigitalInput : Source<Mat> Properties | Improve this Doc View Source ActiveEdge Gets or sets a value specifying on which edge of a clock pulse sampling takes place. Declaration public SampleClockActiveEdge ActiveEdge { get; set; } Property Value Type Description NationalInstruments.DAQmx.SampleClockActiveEdge | Improve this Doc View Source BufferSize Gets or sets the number of samples to acquire, for finite samples, or the size of the buffer for continuous sampling. Declaration public int BufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Channels Gets the collection of virtual input channels from which to read logical values. Declaration public Collection<DigitalInputChannelConfiguration> Channels { get; } Property Value Type Description Collection < DigitalInputChannelConfiguration > | Improve this Doc View Source SampleMode Gets or sets a value specifying whether the acquisition task will acquire a finite number of samples or if it continuously acquires samples. Declaration public SampleQuantityMode SampleMode { get; set; } Property Value Type Description NationalInstruments.DAQmx.SampleQuantityMode | Improve this Doc View Source SampleRate Gets or sets the sampling rate for reading logical values, in samples per second. Declaration public double SampleRate { get; set; } Property Value Type Description Double | Improve this Doc View Source SamplesPerChannel Gets or sets the number of samples per channel in each output buffer. If not specified, the number of samples will be set to the size of the buffer. Declaration public int? SamplesPerChannel { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source SignalSource Gets or sets the optional source terminal of the clock. If not specified, the internal clock of the device will be used. Declaration public string SignalSource { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Reads an observable sequence of logical values from one or more DAQmx digital input lines. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of 2D Mat objects storing the logical values. Each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Each sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Reads an observable sequence of logical values from one or more DAQmx digital input lines, where each new buffer is emitted only when an observable sequence emits a notification. Declaration public IObservable<Mat> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting sample buffers. Returns Type Description IObservable < Mat > A sequence of 2D Mat objects storing the logical values. Each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Each sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.DAQmx.DigitalInputChannelConfiguration.html": {
    "href": "api/Bonsai.DAQmx.DigitalInputChannelConfiguration.html",
    "title": "Class DigitalInputChannelConfiguration",
    "keywords": "Class DigitalInputChannelConfiguration Represents the configuration of a virtual digital input channel in DAQmx operators. Inheritance Object DigitalChannelConfiguration DigitalInputChannelConfiguration Inherited Members DigitalChannelConfiguration.ChannelName DigitalChannelConfiguration.Grouping Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax public class DigitalInputChannelConfiguration : DigitalChannelConfiguration Properties | Improve this Doc View Source Lines Gets or sets the names of the digital lines or ports used to create the local virtual channel. Declaration [TypeConverter(typeof(DigitalInputPhysicalChannelConverter))] public string Lines { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.DAQmx.DigitalOutput.html": {
    "href": "api/Bonsai.DAQmx.DigitalOutput.html",
    "title": "Class DigitalOutput",
    "keywords": "Class DigitalOutput Represents an operator that writes logical values to one or more DAQmx digital output lines from a sequence of sample buffers. DigitalOutput configures and starts a task for writing logical values to one or more digital output lines. Logical values for each line are read from sample buffers in the source sequence, where each row corresponds to one of the channels in the signal generation task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Each logical value sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Digital lines can be grouped as a port when creating the local virtual channel, either by specifying a range of lines (e.g. Dev1/port0/line0:3 ) or by specifying an entire port at once (e.g. Dev1/port0 ). Signals can be generated continuously, where a ring buffer is constanty updated with new data arriving from the source sequence. Logical values can also be provided by a source of integers specifying a bitmask with the state of all digital lines in a single port. Alternatively, signals can also be generated with a finite number of samples, in which case the input buffers will provide samples until the specified buffer size is reached. In this case, the operator will wait for the task to finish generating the specified number of samples. Inheritance Object Combinator < Mat , Mat > Sink < Mat > DigitalOutput Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax public class DigitalOutput : Sink<Mat> Properties | Improve this Doc View Source ActiveEdge Gets or sets a value specifying on which edge of a clock pulse sampling takes place. Declaration public SampleClockActiveEdge ActiveEdge { get; set; } Property Value Type Description NationalInstruments.DAQmx.SampleClockActiveEdge | Improve this Doc View Source BufferSize Gets or sets the number of samples to generate, for finite samples, or the size of the buffer for continuous samples. Declaration public int BufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Channels Gets the collection of virtual output channels on which to write the logical values. Declaration public Collection<DigitalOutputChannelConfiguration> Channels { get; } Property Value Type Description Collection < DigitalOutputChannelConfiguration > | Improve this Doc View Source SampleMode Gets or sets a value specifying whether the writer task will generate a finite number of samples or if it continuously generates samples. Declaration public SampleQuantityMode SampleMode { get; set; } Property Value Type Description NationalInstruments.DAQmx.SampleQuantityMode | Improve this Doc View Source SampleRate Gets or sets the sampling rate for writing logical values, in samples per second. Declaration public double SampleRate { get; set; } Property Value Type Description Double | Improve this Doc View Source SignalSource Gets or sets the optional source terminal of the clock. If not specified, the internal clock of the device will be used. Declaration public string SignalSource { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Mat>) Writes logical values to one or more DAQmx digital output lines from an observable sequence of sample buffers. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D Mat objects storing the logical values. Each row corresponds to a channel in the signal generation task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Each sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing logical values to one or more DAQmx digital output lines. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process(IObservable<Boolean>) Writes an observable sequence of logical values to one or more DAQmx digital output lines. Declaration public IObservable<bool> Process(IObservable<bool> source) Parameters Type Name Description IObservable < Boolean > source A sequence of boolean values representing the logical levels to write to one or more DAQmx digital output lines. Returns Type Description IObservable < Boolean > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing logical values to one or more DAQmx digital output lines. | Improve this Doc View Source Process(IObservable<Byte>) Writes an observable sequence of logical values to one or more DAQmx digital output lines. Declaration public IObservable<byte> Process(IObservable<byte> source) Parameters Type Name Description IObservable < Byte > source A sequence of 8-bit unsigned integers representing the state of digital output lines in a local virtual port channel. Returns Type Description IObservable < Byte > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing logical values to one or more DAQmx digital output lines."
  },
  "api/Bonsai.DAQmx.DigitalOutputChannelConfiguration.html": {
    "href": "api/Bonsai.DAQmx.DigitalOutputChannelConfiguration.html",
    "title": "Class DigitalOutputChannelConfiguration",
    "keywords": "Class DigitalOutputChannelConfiguration Represents the configuration of a virtual digital output channel in DAQmx operators. Inheritance Object DigitalChannelConfiguration DigitalOutputChannelConfiguration Inherited Members DigitalChannelConfiguration.ChannelName DigitalChannelConfiguration.Grouping Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.DAQmx Assembly : Bonsai.DAQmx.dll Syntax public class DigitalOutputChannelConfiguration : DigitalChannelConfiguration Properties | Improve this Doc View Source Lines Gets or sets the names of the digital lines or ports used to create the local virtual channel. Declaration [TypeConverter(typeof(DigitalOutputPhysicalChannelConverter))] public string Lines { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.DAQmx.html": {
    "href": "api/Bonsai.DAQmx.html",
    "title": "Namespace Bonsai.DAQmx",
    "keywords": "Namespace Bonsai.DAQmx Classes AnalogChannelConfiguration Provides an abstract base class for configuration of virtual analog channels in DAQmx operators. AnalogInput Represents an operator that generates a sequence of voltage measurements from one or more DAQmx analog input channels. AnalogInputChannelConfiguration Represents the configuration of a virtual analog input channel in DAQmx operators. AnalogOutput Represents an operator that generates voltage signals in one or more DAQmx analog output channels from a sequence of sample buffers. AnalogOutputChannelConfiguration Represents the configuration of a virtual analog output channel in DAQmx operators. DigitalChannelConfiguration Provides an abstract base class for configuration of virtual digital channels in DAQmx operators. DigitalInput Represents an operator that reads a sequence of logical values from one or more DAQmx digital input lines. DigitalInputChannelConfiguration Represents the configuration of a virtual digital input channel in DAQmx operators. DigitalOutput Represents an operator that writes logical values to one or more DAQmx digital output lines from a sequence of sample buffers. DigitalOutputChannelConfiguration Represents the configuration of a virtual digital output channel in DAQmx operators."
  },
  "articles/daqmx-analoginput.html": {
    "href": "articles/daqmx-analoginput.html",
    "title": "AnalogInput",
    "keywords": "AnalogInput configures and starts a data acquisition task for sampling voltage measurements from one or more physical analog input channels. Samples from each channel will be collected in a sample buffer, where each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. If no input source is specified, data will be collected asynchronously every time a new buffer is filled. Alternatively, if an input observable sequence is provided, a new data buffer will be collected every time a new notification is emitted by the input source."
  },
  "articles/daqmx-analogoutput.html": {
    "href": "articles/daqmx-analogoutput.html",
    "title": "AnalogOutput",
    "keywords": "AnalogOutput configures and starts a task for generating voltage signals in one or more physical analog output channels. Voltage samples for each channel are read from sample buffers in the source sequence, where each row corresponds to one of the channels in the signal generation task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Signals can be generated continuously, where a ring buffer is constanty updated with new data arriving from the source sequence. Alternatively, signals can also be generated with a finite number of samples, in which case the input buffers will provide samples until the specified buffer size is reached. In this case, the operator will wait for the task to finish generating the specified number of samples."
  },
  "articles/daqmx-digitalinput.html": {
    "href": "articles/daqmx-digitalinput.html",
    "title": "DigitalInput",
    "keywords": "DigitalInput configures and starts a data acquisition task for sampling logical values from one or more digital input lines. Logical values will be collected in a sample buffer, where each sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels in the sample buffer follows the order in which you specify the channels in the Channels property. Digital lines can be grouped as a port when creating the local virtual channel, either by specifying a range of lines (e.g. Dev1/port0/line0:3 ) or by specifying an entire port at once (e.g. Dev1/port0 ). If no input source is specified, samples will be collected asynchronously every time a new buffer is filled. Alternatively, if an input observable sequence is provided, a new sample buffer will be collected every time a new notification is emitted by the input source."
  },
  "articles/daqmx-digitaloutput.html": {
    "href": "articles/daqmx-digitaloutput.html",
    "title": "DigitalOutput",
    "keywords": "DigitalOutput configures and starts a task for writing logical values to one or more digital output lines. Logical values for each line are read from sample buffers in the source sequence, where each row corresponds to one of the channels in the signal generation task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Each logical value sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Digital lines can be grouped as a port when creating the local virtual channel, either by specifying a range of lines (e.g. Dev1/port0/line0:3 ) or by specifying an entire port at once (e.g. Dev1/port0 ). Signals can be generated continuously, where a ring buffer is constanty updated with new data arriving from the source sequence. Logical values can also be provided by a source of integers specifying a bitmask with the state of all digital lines in a single port. Alternatively, signals can also be generated with a finite number of samples, in which case the input buffers will provide samples until the specified buffer size is reached. In this case, the operator will wait for the task to finish generating the specified number of samples."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started with Bonsai - DAQmx",
    "keywords": "Getting Started with Bonsai - DAQmx What is Bonsai - DAQmx Bonsai.DAQmx is a Bonsai package that allows interfacing with data acquisition and control hardware from National Instruments within a workflow. The following operators for acquiring and generating signals from either digital or analog channels are provided: AnalogInput AnalogOutput DigitalInput DigitalOutput Each operator supports acquiring or generating both single and multi-channel data, using either finite or continuous sampling. Input sources can acquire samples either synchronously (with an input), or asynchronously (with no input). Examples are provided for some of the most common applications. How to install Bonsai.DAQmx provides a bridge between the DAQmx driver and Bonsai. The Bonsai.DAQmx package can be downloaded through the Bonsai package manager. However, the package itself is not an installer for NI acquisition runtime and SDK. You need to install a compatible version of the DAQmx runtime for your hardware from the NI website . Make sure that the .NET Framework 4.x Language Support optional feature is selected when you install the driver. If you have installed both the package and drivers and find that the operators are not showing up in the Bonsai toolbox, please modify your NI-DAQmx installation and make sure the feature is enabled. Also verify that you have installed the 64-bit NI-DAQmx driver if you are running Bonsai in a 64-bit environment, or 32-bit NI-DAQmx driver if you are running in a 32-bit environment."
  },
  "articles/manual.html": {
    "href": "articles/manual.html",
    "title": "How to use",
    "keywords": "How to use Bonsai.DAQmx provides an interface for data acquisition and signal generation on NI hardware using four distinct operators. In order to use any of the operators, you need to specify a collection of physical channels used to acquire or generate signals using the Channels property. Depending on whether you are working with analog or digital signals the properties used to configure physical channels are slightly different. Channels can be automatically enumerated by the visual interface as long as you have the device correctly plugged and configured in the host computer. Working examples for each of these operators can be found in the extended description for each operator, which we cover below. AnalogInput AnalogInput configures and starts a data acquisition task for sampling voltage measurements from one or more physical analog input channels. Samples from each channel will be collected in a sample buffer, where each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. If no input source is specified, data will be collected asynchronously every time a new buffer is filled. Alternatively, if an input observable sequence is provided, a new data buffer will be collected every time a new notification is emitted by the input source. AnalogOutput AnalogOutput configures and starts a task for generating voltage signals in one or more physical analog output channels. Voltage samples for each channel are read from sample buffers in the source sequence, where each row corresponds to one of the channels in the signal generation task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Signals can be generated continuously, where a ring buffer is constanty updated with new data arriving from the source sequence. Alternatively, signals can also be generated with a finite number of samples, in which case the input buffers will provide samples until the specified buffer size is reached. In this case, the operator will wait for the task to finish generating the specified number of samples. DigitalInput DigitalInput configures and starts a data acquisition task for sampling logical values from one or more digital input lines. Logical values will be collected in a sample buffer, where each sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Each row corresponds to a channel in the acquisition task, and each column to a sample from each of the channels. The order of the channels in the sample buffer follows the order in which you specify the channels in the Channels property. Digital lines can be grouped as a port when creating the local virtual channel, either by specifying a range of lines (e.g. Dev1/port0/line0:3 ) or by specifying an entire port at once (e.g. Dev1/port0 ). If no input source is specified, samples will be collected asynchronously every time a new buffer is filled. Alternatively, if an input observable sequence is provided, a new sample buffer will be collected every time a new notification is emitted by the input source. DigitalOutput DigitalOutput configures and starts a task for writing logical values to one or more digital output lines. Logical values for each line are read from sample buffers in the source sequence, where each row corresponds to one of the channels in the signal generation task, and each column to a sample from each of the channels. The order of the channels follows the order in which you specify the channels in the Channels property. Each logical value sample can represent either a single line or a bitmask representing the state of all digital lines in a single port, depending on the configuration of the virtual channel. Digital lines can be grouped as a port when creating the local virtual channel, either by specifying a range of lines (e.g. Dev1/port0/line0:3 ) or by specifying an entire port at once (e.g. Dev1/port0 ). Signals can be generated continuously, where a ring buffer is constanty updated with new data arriving from the source sequence. Logical values can also be provided by a source of integers specifying a bitmask with the state of all digital lines in a single port. Alternatively, signals can also be generated with a finite number of samples, in which case the input buffers will provide samples until the specified buffer size is reached. In this case, the operator will wait for the task to finish generating the specified number of samples."
  },
  "index.html": {
    "href": "index.html",
    "title": "Bonsai - DAQmx Documentation",
    "keywords": "Bonsai - DAQmx Documentation Bonsai.DAQmx is a Bonsai package that allows interfacing with data acquisition and control hardware from National Instruments within a workflow. Warning These docs are under active development, feel free to contribute by either raising an issue or following the links to Improve this Doc ."
  }
}